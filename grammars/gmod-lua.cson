####################################################################################################
    # Garry's Mod Lua grammar
    # Copyright (C) 2014 Lixquid
    #
    # This program is free software: you can redistribute it and/or modify
    # it under the terms of the GNU General Public License as published by
    # the Free Software Foundation, either version 3 of the License, or
    # (at your option) any later version.
    #
    # This program is distributed in the hope that it will be useful,
    # but WITHOUT ANY WARRANTY; without even the implied warranty of
    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    # GNU General Public License for more details.
####################################################################################################

name: "Garry's Mod Lua"
comment: "Garry's Mod Lua: version 0.1.0"
scopeName: "source.lua"

fileTypes: [ "lua" ]
firstLineMatch: """ #heregex
        \\A \\#! .*? \\b lua \\b                    # Match if we find a bash directive
    """.replace( /(?:[^\\])#.*/g, "" ).replace( "\\#", "#" ).replace( /\s/g, "" )

patterns: [

    ## Garry's Mod Specifics #######################################################################

    {   # C-style single-line comments
        name: "comment.line.double-slash.lua"

        begin: "//"
        end: "\\n"
    }

    {   # C-style block comments
        name: "comment.block.lua"

        begin: "/\\*"
        end: "\\*/"
    }

    {   # continue keyword
        name: "keyword.control.lua"

        match: "\\bcontinue\\b"
    }

    {   # C style logical operators
        name: "keyword.operator.lua"

        match: """ #heregex

                && | \\|{2} | !

            """.replace( /(?:[^\\])#.*/g, "" ).replace( "\\#", "#" ).replace( /\s/g, "" )
    }

    ## Meta ########################################################################################

    {   # Function definition
        name: "meta.function.lua"

        begin: """ #heregex

                \\b ( function )                    # Look for the function keyword

                (?:                                 # Optional: Named function
                    \\s+ (
                        (?: [a-z A-Z _] \\w* [.:] )*    # Scope
                    )
                    ( [a-z A-Z _] \\w* ) \\s*           # Function name
                )?

                \\(

            """.replace( /(?:[^\\])#.*/g, "" ).replace( "\\#", "#" ).replace( /\s/g, "" )
        beginCaptures:
            1: name: "keyword.control.lua"
            2: name: "entity.name.function.scope.lua"
            3: name: "entity.name.function.lua"
            # 4: name: "variable.parameter.function.lua"

        end: "\\)"

        patterns: [
            include: "#function_parameters"
        ]
    }

    ## Constants ###################################################################################

    {   # Numbers
        name: "constant.numeric.lua"

        match: """ #heregex

                \\b (
                    0x [\\d a-f]+                   # Hex Number
                |
                    \\d+                            # Integer Number
                    ( [eE] -? \\d+ )?               # With optional Exponent
                |
                    \\d* \\. \\d+                   # Decimal Number
                    ( [eE] -? \\d+ )?               # With optional Exponent
                )

            """.replace( /(?:[^\\])#.*/g, "" ).replace( "\\#", "#" ).replace( /\s/g, "" )
    }

    {   # Values
        name: "constant.language.lua"

        match: """ #heregex

                \\b (
                    nil | true | false | _G | _VERSION
                    | math \\. ( pi | huge )
                ) \\b
            |
                \\.{3}

            """.replace( /(?:[^\\])#.*/g, "" ).replace( "\\#", "#" ).replace( /\s/g, "" )
    }

    ## Strings #####################################################################################

    {   # Single-quoted strings
        name: "string.quoted.single.lua"

        begin: "'"
        end: "'"

        patterns: [
            {
                name: "constant.character.escape.lua"

                match: """ #heregex

                        \\\\                            # http://www.lua.org/pil/2.4.html
                        ( \\d{1,3}
                            | [abfnrtv\\\\"'\\[\\]] )

                    """.replace( /(?:[^\\])#.*/g, "" ).replace( "\\#", "#" ).replace( /\s/g, "" )
            }
            {
                name: "invalid.illegal.lua"

                match: "\\\\."
            }
        ]
    }

    {   # Double-quoted strings
        name: "string.quoted.double.lua"

        begin: "\""
        end: "\""

        patterns: [
            {
                name: "constant.character.escape.lua"

                match: """ #heregex

                        \\\\                            # http://www.lua.org/pil/2.4.html
                        ( \\d{1,3}
                            | [abfnrtv\\\\"'\\[\\]] )

                    """.replace( /(?:[^\\])#.*/g, "" ).replace( "\\#", "#" ).replace( /\s/g, "" )
            }
            {
                name: "invalid.illegal.lua"

                match: "\\\\."
            }
        ]
    }

    {   # Multi-line strings
        name: "string.quoted.other.multiline.lua"

        begin: """ #heregex
                (?<! -- )                           # Check this is isn't a multi-line comment..
                \\[ ( =* ) \\[                      # Look for the starting braces
            """.replace( /(?:[^\\])#.*/g, "" ).replace( "\\#", "#" ).replace( /\s/g, "" )
        end: "\\]\\1\\]"
    }

    ## Comments ####################################################################################

    {   # Multi-line comments
        name: "comment.block.lua"

        begin: "--\\[(=*)\\["
        end: "\\]\\1\\]"
    }

    {   # Single-line comments
        name: "comment.line.double-dash.lua"

        begin: "--"
        end: "\\n"
    }

    ## Keywords ####################################################################################

    {   # Explicit Keywords
        name: "keyword.control.lua"

        match: """ #heregex

                \\b (
                    break | do | else | for | if
                    | elseif | return | then
                    | repeat | while | until
                    | end | function | local | in
                    | goto
                ) \\b

            """.replace( /(?:[^\\])#.*/g, "" ).replace( "\\#", "#" ).replace( /\s/g, "" )
    }

    {   # Operators
        name: "keyword.operator.lua"

        match: """ #heregex

                \\+ | - | \\* | \\/ | \\^ | %       # Mathematical Operators
                | \\#                               # Auxiliary Operators
                | ==? | ~= | <=? | >=?              # Logical Operators
                | \\b ( and | or | not ) \\b        # Boolean Operators
                | (?<! \\. ) \\.{2} (?! \\. )       # Concatenation Operator

            """.replace( /(?:[^\\])#.*/g, "" ).replace( "\\#", "#" ).replace( /\s/g, "" )
    }

    {   # Self keyword
        name: "variable.language.self.lua"

        match: """ #heregex
                (?<! [^.] \\. | : )                 # Check we're not scoped..
                \\b ( self ) \\b                    # Match the word self
            """.replace( /(?:[^\\])#.*/g, "" ).replace( "\\#", "#" ).replace( /\s/g, "" )
    }

    ## Library Functions ###########################################################################

    {
        name: "support.function.library.lua"

        match: """ #heregex

                (?<! [^.] \\. | : )                 # If we're not scoped..
                \\b (
                    assert | collectgarbage         # Look for any defined built-in function
                    | dofile | error | getfenv
                    | getmetatable | ipairs
                    | loadfile | loadstring
                    | module | next | pairs
                    | pcall | print | rawequal
                    | rawget | rawset | require
                    | select | setfenv
                    | setmetatable | tonumber
                    | tostring | type | unpack
                    | xpcall
                ) \\b

            """.replace( /(?:[^\\])#.*/g, "" ).replace( "\\#", "#" ).replace( /\s/g, "" )
    }

    {
        name: "support.function.library.lua"

        match: """ #heregex

                (?<! [^.] \\. | : )                 # Make sure we're not scoped..

                \\b(                                # Look for any library name
                    coroutine \\. (
                        create | resume | running
                        | status | wrap | yield )
                    | string \\. (
                        byte | char | dump | find
                        | format | gmatch | gsub
                        | len | lower | match
                        | rep | reverse | sub
                        | upper )
                    | table \\. (
                        concat | insert | maxn
                        | remove | sort )
                    | math \\. (
                        abs | acos | asin
                        | atan2? | ceil | cosh?
                        | deg | exp | floor
                        | fmod | frexp | ldexp
                        | log | log10 | max | min
                        | modf | pow | rad
                        | random | randomseed
                        | sinh? | sqrt | tanh? )
                    | io \\. (
                        close | flush | input
                        | lines | open | output
                        | popen | read | tmpfile
                        | type | write )
                    | os \\. (
                        clock | date | difftime
                        | execute | exit | getenv
                        | remove | rename
                        | setlocale | time
                        | tmpname )
                    | package \\. (
                        cpath | loaded | loadlib
                        | path | preload | seeall )
                    | debug \\. (
                        debug | [gs]etfenv
                        | [gs]ethook | getinfo
                        | [gs]etlocal
                        | [gs]etmetatable
                        | getregistry
                        | [gs]etupvalue
                        | traceback )
                ) \\b

            """.replace( /(?:[^\\])#.*/g, "" ).replace( "\\#", "#" ).replace( /\s/g, "" )
    }

    ## Variables ###################################################################################

    {   # Goto Targets
        name: "keyword.control.tag.lua"

        match: """ #heregex
                :: [a-z A-Z _] \\w* ::
            """.replace( /(?:[^\\])#.*/g, "" ).replace( "\\#", "#" ).replace( /\s/g, "" )
    }

    {   # Table Variables
        name: "variable.other.lua"

        match: """ #heregex

                (?<= [^.] \\. | : )                 # Check that we're scoped..
                \\b ( [a-z A-Z _] \\w* )            # Look for a valid variable name

            """.replace( /(?:[^\\])#.*/g, "" ).replace( "\\#", "#" ).replace( /\s/g, "" )
    }

    {   # Function calls
        name: "support.function.any-method.lua"

        match: """ #heregex

                \\b ( [a-z A-Z _] \\w* )            # Check for a valid variable name..
                \\b (?= \\s*
                    (?:                             # Check that it's called like a function
                        [({"']
                    |
                        \\[ =* \\[
                    )
                )

            """.replace( /(?:[^\\])#.*/g, "" ).replace( "\\#", "#" ).replace( /\s/g, "" )
    }

]

repository:
    function_parameters: patterns: [
        name: "variable.parameter.function.lua"

        match: "([^,])"
    ]
