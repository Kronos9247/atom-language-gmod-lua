{"name":"Garry's Mod Lua","comment":"Garry's Mod Lua: version 0.2.0","scopeName":"source.lua","fileTypes":["lua"],"firstLineMatch":"(?x-mi:\n\t\t# Change syntax to Lua if we find a bash directive\n\t\t\\A \\#! .*? \\b lua \\b\n\t)","patterns":[{"name":"comment.line.double-slash.lua","begin":"//","end":"\\n"},{"name":"comment.block.lua","begin":"/\\*","end":"\\*/"},{"name":"keyword.control.lua","match":"\\bcontinue\\b"},{"name":"keyword.operator.lua","match":"&&|\\|{2}|!"},{"name":"meta.function.lua","begin":"(?x-mi:\n\t\t\t\t# Get the function keyword\n\t\t\t\t\\b ( function )\n\n\t\t\t\t# Optional: Named Function\n\t\t\t\t(?:\n\t\t\t\t\t# Scope\n\t\t\t\t\t\\s+ ( (?: [a-zA-Z_]\\w* [.:] )* )\n\t\t\t\t\t# Function Name\n\t\t\t\t\t( [a-zA-Z_]\\w* ) \\s*\n\t\t\t\t)?\n\n\t\t\t\t\\(\n\t\t\t)","beginCaptures":[{},{"name":"keyword.control.lua"},{"name":"entity.name.function.scope.lua"},{"name":"entity.name.function.lua"}],"end":"\\)","patterns":[{"name":"variable.parameter.function.lua","match":"([^,])"}]},{"name":"constant.numeric.lua","match":"(?x-mi:\n\n\t\t\t\t\\b (\t# Hex Numbers\n\t\t\t\t\t0x [\\d a-f]+\n\t\t\t\t|\t# Integers (with optional exponent)\n\t\t\t\t\t\\d+\n\t\t\t\t\t( [eE] -? \\d+ )?\n\t\t\t\t|\t# Decimal Numbers (with optional exponent)\n\t\t\t\t\t\\d* \\. \\d+\n\t\t\t\t\t( [eE] -? \\d+ )?\n\t\t\t\t)\n\t\t\t)"},{"name":"constant.language.lua","match":"(?x-mi:\n\t\t\t\t\\b (\n\t\t\t\t\tnil | true | false | _G | _VERSION | math \\. ( pi | huge )\n\t\t\t\t) \\b\n\t\t\t|\n\t\t\t\t\\.{3}\n\t\t\t)"},{"name":"string.quoted.single.lua","begin":"'","end":"'","patterns":[{"include":"#escaped_chars"}]},{"name":"string.quoted.double.lua","begin":"\"","end":"\"","patterns":[{"include":"#escaped_chars"}]},{"name":"string.quotes.other.multiline.lua","begin":"(?x-mi:\n\t\t\t\t# Don't match if this is a multiline comment..\n\t\t\t\t(?<! -- )\n\t\t\t\t# Match the starting double brace\n\t\t\t\t\\[ ( =* ) \\[\n\t\t\t)","end":"\\]\\1\\]"},{"name":"comment.block.lua","begin":"--\\[(=*)\\[","end":"\\]\\1\\]"},{"name":"comment.line.double-dash.lua","begin":"--","end":"\\n"},{"name":"keyword.control.lua","match":"(?x-mi:\n\t\t\t\t\\b (\n\t\t\t\t\tbreak | do | else | for | if | elseif | return | then\n\t\t\t\t\t| repeat | while | until | end | function | local | in\n\t\t\t\t\t| goto\n\t\t\t\t) \\b\n\t\t\t)"},{"name":"keyword.operator.lua","match":"(?x-mi:\n\t\t\t\t# Mathematical Operators\n\t\t\t\t\\+ | - | \\* | \\/ | \\^ | %\n\t\t\t\t# Auxiliary Operators\n\t\t\t\t| \\#\n\t\t\t\t# Logical Operators\n\t\t\t\t| ==? | ~= | <=? | >=?\n\t\t\t\t# Boolean Operators\n\t\t\t\t| \\b ( and | or | not ) \\b\n\t\t\t\t# Concatenation Operator\n\t\t\t\t| (?<! \\. ) \\.{2} (?! \\. )\n\t\t\t)"},{"name":"varaible.language.self.lua","match":"(?x-mi:\n\t\t\t\t# Check we're not scoped..\n\t\t\t\t(?<![^.]\\.|:)\n\t\t\t\t# Match the word \"self\"\n\t\t\t\t\\b ( self ) \\b\n\t\t\t)"},{"name":"support.function.library.lua","match":"(?x-mi:\n\n\t\t\t\t# Check we're not scoped..\n\t\t\t\t(?<![^.]\\.|:)\n\n\t\t\t\t# Check for any built-in function\n\t\t\t\t\\b (\n\t\t\t\t\tassert | collectgarbage | dofile | error | getfenv\n\t\t\t\t\t| getmetatable | ipairs | loadfile | loadstring | module\n\t\t\t\t\t| next | pairs | pcall | print | rawequal | rawget | rawset\n\t\t\t\t\t| require | select | setfenv | setmetatable | tonumber\n\t\t\t\t\t| tostring | type | unpack | xpcall\n\t\t\t\t) \\b\n\n\t\t\t)"},{"name":"support.function.library.lua","match":"(?x-mi:\n\n\t\t\t\t# Check we're not scoped..\n\t\t\t\t(?<![^.]\\.|:)\n\n\t\t\t\t# Look for any library name\n\t\t\t\t\\b (\n\t\t\t\t\tcoroutine \\. (\n\t\t\t\t\t\tcreate | resume | running | status | wrap | yield )\n\t\t\t\t\t| debug \\. (\n\t\t\t\t\t\tdebug | [gs]etfenv | [gs]ethook | getinfo | [gs]etlocal\n\t\t\t\t\t\t| [gs]etmetatable | getregistry | [gs]etupvalue\n\t\t\t\t\t\t| traceback )\n\t\t\t\t\t| io \\. (\n\t\t\t\t\t\tclose | flush | input | lines | open | output | popen\n\t\t\t\t\t\t| read | tmpfile | type | white )\n\t\t\t\t\t| math \\. (\n\t\t\t\t\t\tabs | acos | asin | atan2? | ceil | cosh? | deg | exp\n\t\t\t\t\t\t| floor | fmod | frexp | ldexp | log | log10 | max | min\n\t\t\t\t\t\t| modf | pow | rad | random | randomseed | sinh? | sqrt\n\t\t\t\t\t\t| tanh? )\n\t\t\t\t\t| os \\. (\n\t\t\t\t\t\tclock | date | difftime | execute | exit | getenv\n\t\t\t\t\t\t| remove | rename | setlocale | time | tmpname )\n\t\t\t\t\t| package \\. (\n\t\t\t\t\t\tcpath | loaded | loadlib | path | preload | seeall )\n\t\t\t\t\t| string \\. (\n\t\t\t\t\t\tbyte | char | dump | find | format | gmatch | gsub | len\n\t\t\t\t\t\t| lower | match | rep | reverse | sub | upper )\n\t\t\t\t\t| table \\. (\n\t\t\t\t\t\tconcat | insert | maxn | remove | sort )\n\t\t\t\t) \\b\n\n\t\t\t)"},{"name":"keyword.control.tag.lua","match":"(?x-mi:\n\t\t\t\t:: [a-zA-Z_]\\w* ::\n\t\t\t)"},{"name":"variable.other.lua","match":"(?x-mi:\n\n\t\t\t\t# Check that we ARE scoped..\n\t\t\t\t(?<= [^.] \\. | : )\n\n\t\t\t\t# Look for a valid varaible name\n\t\t\t\t\\b ( [a-zA-Z_]\\w* )\n\n\t\t\t)"},{"name":"support.function.any-method.lua","match":"(?x-mi:\n\n\t\t\t\t# Check for a valid variable name..\n\t\t\t\t\\b ( [a-zA-Z_]\\w* )\n\n\t\t\t\t# Check that it's called like a function\n\t\t\t\t\\b (?= \\s* (?: [({\"'] | \\[ =* \\[ ) )\n\t\t\t)"}],"repository":{"escaped_chars":{"patterns":[{"name":"constant.character.escape.lua","match":"(?x-mi:\n\t\t\t\t\t\t# Match any valid escape character\n\t\t\t\t\t\t\\\\ ( \\d{1,3} | [abfnrtv\\\\\"'\\[\\]] )\n\t\t\t\t\t)"},{"name":"invalid.illegal.lua","match":"\\\\."}]}}}